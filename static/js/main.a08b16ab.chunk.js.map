{"version":3,"sources":["App.js","serviceWorker.js","index.js","illust.svg"],"names":["App","props","state","voters","issues","engage","className","src","topImage","alt","style","width","flex","disabled","this","end","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"2TA4FeA,E,YAtFb,WAAYC,GAAO,IAAD,8BAChB,4CAAMA,KACDC,MAAM,CACTC,OAAO,KACPC,OAAO,KACPC,QAAO,GALO,E,sEAUhB,OACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,QACb,6BACE,yBAAKC,IAAKC,IAAUC,IAAI,GAAGC,MAAO,CAACC,MAAM,QAE3C,gJAKJ,yBAAKL,UAAU,WAAf,sBAGA,yBAAKA,UAAU,0BACb,yBAAKA,UAAU,kBACb,yBAAKI,MAAO,CAACE,KAAK,IAChB,gDAGA,6BACE,4BAAQC,SAAUC,KAAKZ,MAAMG,QAA7B,YAKJ,yBAAKK,MAAO,CAACE,KAAK,IAChB,iDAGA,6BACE,4BAAQC,UAAWC,KAAKZ,MAAMG,QAA9B,eAKJ,yBAAKK,MAAO,CAACE,KAAK,IAChB,sDAGA,6BACE,4BAAQC,UAAWC,KAAKZ,MAAMG,QAA9B,0BAOR,yBAAKC,UAAU,UACb,yBAAKA,UAAU,uBACb,yBAAKA,UAAU,eACb,6BACE,uCAGA,yBAAKA,UAAU,SACb,kBAAC,IAAD,CAASS,IAAKD,KAAKZ,MAAMC,WAG7B,6BACE,uCAGA,yBAAKG,UAAU,SACb,kBAAC,IAAD,CAASS,IAAKD,KAAKZ,MAAME,mB,GA7EzBY,IAAMC,WCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB,kBEnInBC,EAAOC,QAAU,IAA0B,qC","file":"static/js/main.a08b16ab.chunk.js","sourcesContent":["import React from 'react';\nimport topImage from './illust.svg';\nimport './App.css';\nimport CountUp from 'react-countup';\nclass App extends React.Component{\n  \n  constructor(props){\n    super(props);\n    this.state={\n      voters:4232,\n      issues:4237,\n      engage:false\n    }\n  }\n\n  render(){    \n    return (\n      <div className=\"App\">\n        <div className=\"desc-wrapper\">\n          <div className=\"desc\">    \n            <div>\n              <img src={topImage} alt=\"\" style={{width:120}}/>\n            </div>\n            <div>\n                Participation in engagements let you take judgements for the issued deals. You earn piggy tokens as a reward.\n            </div>\n          </div>\n        </div>\n        <div className=\"heading\">\n          Take a closer look\n        </div>\n        <div className=\"button-section-wrapper\">\n          <div className=\"button-section\">\n            <div style={{flex:1}}>\n              <div>\n                Want to dig in?\n              </div>\n              <div>\n                <button disabled={this.state.engage}>\n                  Engage\n                </button>\n              </div>\n            </div>\n            <div style={{flex:1}}>\n              <div>\n                Want to Opt out?\n              </div>\n              <div>\n                <button disabled={!this.state.engage}>\n                  Disengage\n                </button>\n              </div>\n            </div>\n            <div style={{flex:1}}>\n              <div>\n                Ready to participate?\n              </div>\n              <div>\n                <button disabled={!this.state.engage}>\n                  Enter the chatroom\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"footer\">\n          <div className=\"footer-item-wrapper\">\n            <div className=\"footer-item\">    \n              <div>\n                <div>\n                  Voters\n                </div>\n                <div className=\"count\">\n                  <CountUp end={this.state.voters} />\n                </div>\n              </div>\n              <div>\n                <div>\n                  Issues\n                </div>\n                <div className=\"count\">\n                  <CountUp end={this.state.issues} />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/illust.7683d217.svg\";"],"sourceRoot":""}